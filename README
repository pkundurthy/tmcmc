<<<<<<< HEAD
 Transit Markov Chain Monte Carlo 
 used by the APOSTLE program at the University of Washington, Seattle
=======
 Last Updated: 2012-Apr-01 01:19:46
>>>>>>> 043fa93ff509d92fb40596f76a4b04d75c931c23

+ binning.py
     MedianMeanOutlierRejection(indata, cutoff, choice):
     makeGridRange(x0,xEnd,bin):
     isInRange(x,x0,x1):
     GridBinning(x,y,yerr,bin):

<<<<<<< HEAD
+ bound_MTQ_2010.py
     bound_u1plusu2_2010(ModelParams):
     bound_u1_2010(ModelParams):
     bound_v1_2010(ModelParams):
     bound_v1plusv2_2010(ModelParams):
     bound_D_2010(ModelParams):
     bound_RpRsSQ_2010(ModelParams):
     bound_tT_2010(ModelParams):
     bound_tG_2010(ModelParams):
     bound_bfraction_2010(ModelParams):
     bound_vfraction_2010(ModelParams):
     bound_vfraction_withD_2010(ModelParams):
     bound_bfraction_withD_2010(ModelParams):
     get_RpRsSQ_2010(ModelParams):
     bound_a0(ModelParams):
     bound_a1plusa2sq(ModelParams):

+ bound_MTQ_2011.py
     bound_v1_2011(ModelParams):
     bound_v1plusv2_2011(ModelParams):
     bound_D_2011(ModelParams):
     bound_tT_2011(ModelParams):
     bound_tG_2011(ModelParams):
     bound_vfraction_MTQ_2011(ModelParams):
     bound_bfraction_MTQ_2011(ModelParams):
     bound_bOVERaRs_MTQ_2011(ModelParams):
=======
+ myderivedfunc.py

+ myfunc.py

+ postmcmc.py
     covcorStats(File, FileTag, **kwargs):
     sortStats(StatDict, stype):
     plotChain(File1, **keywords):
     plotTrace(File1,File2, **keywords):
     autocorMCMC(File, lowtol, jmax, OutStatFile, mkPlotsFlag, **keywords):
     autocorMCMC_old(File, lowtol, jmax, OutStatFile, mkPlotsFlag, **keywords):
     GelmanRubinConvergence(FileList,ModelFile,OutFile, **kwargs):

+ MTQ_2010.py
     MultiTransitQuick_circular_rprs_vm(ModelParams,ObservedData):
     MultiTransitQuick_circular_depth_vm(ModelParams,ObservedData):
     transitquick_circ_depth(t,p):
     transitquick_circ_rprs(t,p):

+ MTQ_2011.py
     MTQ_multidepth_tduration(ModelParams,ObservedData):
     MTQ_getDerivedParams(D,tT,tG,u1,u2,Period):
     MTQ_FilterParams(RefFilt,Tags,ModelParams):

+ DataFuncPrep.py
     mkObsDataLine(ObservedData,index_i):
     mkNusDataLine(NuisanceData,index_i):
     LClineFromIndex(outdict,index_i):
     dtlineFromIndex(outdict,index_i):
     getTT(fileName,ObjectName):
     getAP(fileName):
     writeUpdatedNuisance(FileName, dt_data):
     readNusFile(FileName):
     readDataFile(DataFile):
     ToBeBinned(ObjectName,TT):
     getOpenNusPars(NuisanceData,TT):
     mkNuisance(NuisanceData):
     applyGoodIDs(ObservedData,NuisanceData,goodids):
     BinnedData(outdata,binsize):
     normalizeFluxRatio(outdata,T0,tT,tG):
     writeLCFile(ObservedData,outfile):
     SecondRejectOutliers(DetrendedData,ModelData,sigma,TT):
     rejectOutliers(DetrendedData,ModelData,sigmas):
     SwitchOFF(NuisanceData,OffList,TTagList):
     getSwitchLine(ObjectName,TT,**kwargs):
     chisq(Data,ModelData):
     NOpen(ModelParams):
     NTTs(ModelParams):
     HiRes(ObservedData,Num):
     get_optap(rms,TT):

+ workingfolder_setup.py
     get_user_exec():

+ mcmc.py
     MakeMCMCheader(ModelParams):
     printMCMCline(param_tagorder,ModelParams,istep,frac,acr,chi1,chi2):
     chisq(fobs,sig,fmodel):
     fn_randG(mu,sig):
     fn_randU(lower,upper):
     AdaptiveMultiplierCheck(ModelParams):
     StepperFunction(ModelParams,frac):
     mcmc_mh_adapt(Nsteps,FunctionName,ObservedData,ModelParams,NuisanceData,BoundParams,writeDtCoeffFlag,resumeFlag,OutFile,ShowOutput):
     mcmc_mh_adapt_derived(Nsteps,FunctionName,ObservedData,ModelParams,NuisanceData,BoundParams,writeDtCoeffFlag,resumeFlag,printDerivedFlag,OutFile,DerivedFunctionName,DerivedFile,ShowOutput):
     getDTCOEFFlines(DetrendData):
     DetrendData(ObservedData,ModelData,NuisanceData,OutFile,writeDtCoeffFlag):
     LinearLeastSq_coeff(A,B):
     LinearLeastSq_errors(A):
     ApplyBounds(ModelParams,BoundParams):
>>>>>>> 043fa93ff509d92fb40596f76a4b04d75c931c23

+ derived_MTQ_2011.py
     returnDerivedLine_MTQ2011(ModelParams,istep,keyList0):
     printDerivedParFile_MTQ_2011(ParFile,OutParFile):
     printDerived_MTQ_2011(STARTFILE,MCMCfile,DerivedFile):
     filterMatchD(TransitTag,Tags,ModelParams):

<<<<<<< HEAD
+ func_example.py
     quad(ModelParams,ObservedData):

+ iobinning.py
     ReadData(file):
     WriteLightCurveFile(OutFileName,file,IngressTime,EgressTime):
     WriteNuisanceFile(OutFileName,file):
     WriteLCNUSoutlierRejection(OutFileTag,file,IngressTime,EgressTime):
=======
+ misc.py
     String2Bool(inStr):
     String2IntFloat(inStr):
     format(str, form):
     quickMean(itr):
     linefitquick_werr(x,y,yerr):
>>>>>>> 043fa93ff509d92fb40596f76a4b04d75c931c23

+ iomcmc.py
     MakeModelParsContinue(par0,par1,ModelPars):
     ReadStartParams(filename):
     ReadSingleDataFile(file):
     ReadDataFile(file):
     ReadMultiList(listfile):
     ReadColFloat(file,separator,comment):
     checkFileExists(file):
     ReadDetrendFile(file):
     ReadBoundsFile(file):
     ReadHeaderMCMC(line):
     ReadMCMCline(line,header):
     WriteLowestChisq(file,ModelParams,OutFileName,ShowOutput):
     CheckContinue(file,ModelPars):
     ReadMCMCheader(OutFile):
     PrintModelParams(ModelParams,OutFile):
     ReadBoundFile(file):

+ iopostmcmc.py
     readStatHeaders(FileName):
     readStatsFile(FileName):
     readALLStats(**kwargs):
     isNonParam(key):
     getNparams(hdrkeys):
     readMCMChdr(filename):
     getPars(filename):
     readMCMC(filename):
     read1parMCMC(filename,parname):
     cropMCMC(mcmcfile,outfile,cropperc):
     makeStartFromExplore(ListOfChains,StablePerc,SampleParamFile,OutputParamFile):
     printErrors(MCMCfile,BestfitFile,OutputFile):
     readDTfile(file,NuisONOFF):
     generateDT(MCMCFile,ObservedData,ModelParams,NuisanceData,FuncName):
     correctionFromMCMC(MCMCFile,ObservedData,ModelParams,NuisanceData,FuncName):
     correctionFromDTfile(file,NuisONOFF):

+ mcmc.py
     MakeMCMCheader(ModelParams):
     printMCMCline(param_tagorder,ModelParams,istep,frac,acr,chi1,chi2):
     chisq(fobs,sig,fmodel):
     fn_randG(mu,sig):
     fn_randU(lower,upper):
     AdaptiveMultiplierCheck(ModelParams):
     StepperFunction(ModelParams,frac):
     mcmc_mh_adapt(Nsteps,FunctionName,ObservedData,ModelParams,NuisanceData,BoundParams,writeDtCoeffFlag,resumeFlag,OutFile,ShowOutput):
     mcmc_mh_adapt_derived(Nsteps,FunctionName,ObservedData,ModelParams,NuisanceData,BoundParams,writeDtCoeffFlag,resumeFlag,printDerivedFlag,OutFile,DerivedFunctionName,DerivedFile,ShowOutput):
     getDTCOEFFlines(DetrendData):
     DetrendData(ObservedData,ModelData,NuisanceData,OutFile,writeDtCoeffFlag):
     LinearLeastSq_coeff(A,B):
     ApplyBounds(ModelParams,BoundParams):

+ misc.py
     String2Bool(inStr):
     String2IntFloat(inStr):
     format(str, form):

+ MTQ_2010.py
     MultiTransitQuick_circular_rprs_vm(ModelParams,ObservedData):
     MultiTransitQuick_circular_depth_vm(ModelParams,ObservedData):
     transitquick_circ_depth(t,p):
     transitquick_circ_rprs(t,p):

+ MTQ_2011.py
     MTQ_multidepth_tduration(ModelParams,ObservedData):
     MTQ_getDerivedParams(D,tT,tG,u1,u2,Period):
     MTQ_FilterParams(RefFilt,Tags,ModelParams):

+ myboundfunc.py

+ myderivedfunc.py

+ myfunc.py

+ myplotfunc.py

+ plotmcmc.py
     rangeMidpoints(x):
     return1Dfrom2D(arr2D):
     singleJC(data1,data2):
     JC(par1,par2,dataMCMC):
     getRange(d,**kwargs):
     axisTicks(rg0,rg1):
     subID(Coord,Nx,Ny):
     SimplifyGrid(xp,yp):

+ ioTAP.py
     ReadSingleTAP_DataFile(fileName):
     print_TAPerr(InputFile,OutputFile):
     readTAPMCMC_SplitSections(filename):
     FilterCheck(LinkData):
     SortData(LinkData,ParData):
     parStringConvert(parName):
     Line2Data(line,ColSort,key,DataParDict):
     GetData(Section,ColSection,TTList):
     ColTTSort(Section):
     TTSort(Section):
     getcolTTag(line):
     getTTag(line):
     getTAP_TTs(Section):

+ plotTransit.py
     FitLabels(CaseName):
     returnTsub(TSTAMP):
     Tfilter(TT,objectName):
     TForm(parName,**kwargs):
     TransitTableFormat(allpars,**kwargs):
     TStatForm(parName,**kwargs):
     TransitParFormat(parlist,**kwargs):
     TransitStatParFormat(parlist,**kwargs):
     TData(d,parName,par1):
     PrepTransitData(MCMCFileList,parlist,BestFitPar):
     parErr4Plot(parErr):
     robust1sigma(x):
     parTimeDay2Sec(pars,bestFitPars):
     ShortenTT(parLabels):
     getxyparsFromParList(parList):
     makeStatLabels(Stats,DataFile):
     getParFormat(name):
     getEntryString(value,lower,upper,useSingle,parformat):
     getUnitString(name):

+ postmcmc.py
     covcorStats(File, FileTag):
     plotTrace(File1,File2, **keywords):
     autocorMCMC(File, lowtol, jmax, OutStatFile, mkPlotsFlag, **keywords):

+ runminuit.py
     MinuitPar2Err(ParFile,ErrFile):
     RunMinuit(FunctionName,ObservedData,ModelParams,NuisanceData,BoundParams,tolnum,OutFile):
     f_chisquared(FunctionName,ObservedData,ModelParams,NuisanceData,BoundParams):

<<<<<<< HEAD
=======
+ iopostmcmc.py
     readStatHeaders(FileName):
     readStatsFile(FileName):
     readALLStats(**kwargs):
     isNonParam(key):
     getNparams(hdrkeys):
     readMCMChdr(filename):
     getPars(filename):
     readMCMC(filename):
     read1parMCMC(filename,parname, **kwargs):
     cropMCMC(mcmcfile,outfile,cropperc,NumCropLine):
     cropMCMC_old(mcmcfile,outfile,cropperc):
     makeStartFromExplore(ListOfChains,StablePerc,SampleParamFile,OutputParamFile):
     readErrorFile(errorFile):
     printErrors(MCMCfile,BestfitFile,OutputFile):
     readDTfile(file,NuisONOFF):
     generateDT(MCMCFile,ObservedData,ModelParams,NuisanceData,FuncName):
     correctionFromMCMCBestFit(MCMCFile,ObservedData,ModelParams,NuisanceData,FuncName):
     correctionFromMCMC(MCMCFile,ObservedData,ModelParams,NuisanceData,FuncName):
     correctionFromDTfile(file,NuisONOFF):
     getEffAutoCorStatFile(fileName):

>>>>>>> 043fa93ff509d92fb40596f76a4b04d75c931c23
+ tqessential.py
     ekepler(m,e):
     kepler(m,e):
     ellke(k):
     ellpic_bulirsch(n,k):
     occultquad(z,u1,u2,p0):
     newtraph6(x,a5,a4,a0):
     tqsextic(x,a5,a4,a0):
     checkRealRoots(a5,a4,a0):
     NsignChange(List):
     strum_tqsextic_f4(x,a5,a4,a0):
     strum_tqsextic_f3(x,a5,a4,a0):
     strum_tqsextic_f2(x,a5,a4,a0):
     strum_tqsextic_f1(x,a5,a4,a0):
     strum_tqsextic_f0(a5,a4,a0):
     disc_tqsextic(a5,a4,a0):
     computeRpRs(u1,u2,tT,tG,D):
     LDC_v2u(v1,v2):
     getFilterTags(StringArray):
     getTags(ModelParams):
     computePeriod(ModelParams):
     TransitLC(timeIn,F0,inc,aRs,Period,RpRs,u1,u2,T0):
     slopefitquick(x,y):

<<<<<<< HEAD
=======
+ plotmcmc.py
     rangeMidpoints(x):
     return1Dfrom2D(arr2D):
     singleJC(data1,data2):
     JC(par1,par2,dataMCMC):
     getRange(d,**kwargs):
     axisTicks(rg0,rg1):
     subID(Coord,Nx,Ny):
     SimplifyGrid(xp,yp):

+ class_fitprep.py
     OpenParArray(ModelParams):
     MakeStartParams(ObjectName,FitID):
     ApplyShift(StartParams,fitNum,Shift):
     SwitchClosedAll(ModelParams):
     readTAPdata(Path):
     getTAPfitTables(casePath):

+ binning.py
     MedianMeanOutlierRejection(indata, cutoff, choice):
     makeGridRange(x0,xEnd,bin):
     isInRange(x,x0,x1):
     GridBinning(x,y,yerr,bin):

+ bound_MTQ_2010.py
     bound_u1plusu2_2010(ModelParams):
     bound_u1_2010(ModelParams):
     bound_v1_2010(ModelParams):
     bound_v1plusv2_2010(ModelParams):
     bound_D_2010(ModelParams):
     bound_RpRsSQ_2010(ModelParams):
     bound_tT_2010(ModelParams):
     bound_tG_2010(ModelParams):
     bound_bfraction_2010(ModelParams):
     bound_vfraction_2010(ModelParams):
     bound_vfraction_withD_2010(ModelParams):
     bound_bfraction_withD_2010(ModelParams):
     get_RpRsSQ_2010(ModelParams):
     bound_a0(ModelParams):
     bound_a1plusa2sq(ModelParams):

+ bound_MTQ_2011.py
     bound_v1_2011(ModelParams):
     bound_v1plusv2_2011(ModelParams):
     bound_uvalues_2011(ModelParams):
     bound_D_2011(ModelParams):
     bound_tT_2011(ModelParams):
     bound_tG_2011(ModelParams):
     bound_vfraction_MTQ_2011(ModelParams):
     bound_bfraction_MTQ_2011(ModelParams):
     bound_bOVERaRs_MTQ_2011(ModelParams):

>>>>>>> 043fa93ff509d92fb40596f76a4b04d75c931c23
