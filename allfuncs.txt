# iobinning.py
    binning.py:def ReadData(file):
    binning.py:def WriteLightCurveFile(OutFileName,file,IngressTime,EgressTime):
    binning.py:def WriteNuisanceFile(OutFileName,file):
    
# binning.py
    binning.py:def MedianMeanOutlierRejection(indata, cutoff, choice):
    binning.py:def makeGridRange(x0,xEnd,bin):
    binning.py:def isInRange(x,x0,x1):
    binning.py:def GridBinning(x,y,yerr,bin):

# iomcmc.py
    mcmc.py:def ReadStartParams(filename):
    mcmc.py:def ReadSingleDataFile(file):
    mcmc.py:def ReadDataFile(file):
    mcmc.py:def ReadMultiList(listfile):
    mcmc.py:def ReadColFloat(file,separator,comment):
    mcmc.py:def checkFileExists(file):
    mcmc.py:def ReadDetrendFile(file):
    mcmc.py:def ReadBoundsFile(file):
    mcmc.py:def ReadHeaderMCMC(line):
    mcmc.py:def ReadMCMCline(line,header):
    mcmc.py:def WriteLowestChisq(file,ModelParams,OutFileName,ShowOutput):
    mcmc.py:def CheckContinue(file,ModelPars):
    mcmc.py:def ReadMCMCheader(OutFile):
    mcmc.py:def PrintModelParams(ModelParams,OutFile):
    mcmc.py:def ReadBoundFile(file):

# mcmc.py
    mcmc.py:def MakeModelParsContinue(par0,par1,ModelPars):
    mcmc.py:def MakeMCMCheader(ModelParams):
    mcmc.py:def printMCMCline(param_tagorder,ModelParams,istep,frac,acr,chi1,chi2):
    mcmc.py:def chisq(fobs,sig,fmodel):
    mcmc.py:def fn_randG(mu,sig):
    mcmc.py:def fn_randU(lower,upper):
    mcmc.py:def AdaptiveMultiplierCheck(ModelParams):
    mcmc.py:def StepperFunction(ModelParams,frac):
    mcmc.py:def mcmc_mh_adapt(Nsteps,FunctionName,ObservedData,ModelParams,NuisanceData,BoundParams,writeDtCoeffFlag,resumeFlag,OutFile,ShowOutput):
    mcmc.py:def mcmc_mh_adapt_derived(Nsteps,FunctionName,ObservedData,ModelParams,NuisanceData,BoundParams,writeDtCoeffFlag,resumeFlag,printDerivedFlag,OutFile,DerivedFile,ShowOutput):
    mcmc.py:def DetrendData(ObservedData,ModelData,NuisanceData,OutFile,writeDtCoeffFlag):
    mcmc.py:def LinearLeastSq_coeff(A,B):
    mcmc.py:def ApplyBounds(ModelParams,BoundParams):

# iopostmcmc.py
    postmcmc.py:def readMCMChdr(filename):
    postmcmc.py:def readMCMC(filename):
    postmcmc.py:def read1parMCMC(filename,parname):
    postmcmc.py:def cropMCMC(mcmcfile,outfile,cropperc):
    postmcmc.py:def makeStartFromExplore(ListOfChains,StablePerc,SampleParamFile,OutputParamFile):
    postmcmc.py:def printErrors(MCMCfile,BestfitFile,OutputFile):
        
# postmcmc.py
    postmcmc.py:def getNparams(hdrkeys):
    postmcmc.py:def covcorStats(data, FileTag):
    postmcmc.py:def plotTrace(data1, data2, **keywords):
    postmcmc.py:def autocorMCMC(data, lowtol, jmax, OutStatFile, mkPlotsFlag, **keywords):
    postmcmc.py:def isNonParam(key):

# myfunc.py
    # MTQ_2010.py
        MTQ_2010.py:def MultiTransitQuick_circular_rprs_vm(ModelParams,ObservedData):
        MTQ_2010.py:def MultiTransitQuick_circular_depth_vm(ModelParams,ObservedData):
        MTQ_2010.py:def transitquick_circ_depth(t,p):
        MTQ_2010.py:def transitquick_circ_rprs(t,p):
    # func_example.py
        MTQ_2010.py:def quad(ModelParams,ObservedData):
    # MTQ_2011.py
        MTQ_2011.py:def MTQ_multidepth_tduration(ModelParams,ObservedData):
        MTQ_2011.py:def MTQ_getDerivedParams(D,tT,tG,u1,u2,Period):
        MTQ_2011.py:def MTQ_FilterParams(RefFilt,Tags,ModelParams):
        
# tqessential.py
    tqessential.py:def ekepler(m,e):
    tqessential.py:def kepler(m,e):
    tqessential.py:def ellke(k):
    tqessential.py:def ellpic_bulirsch(n,k):
    tqessential.py:def occultquad(z,u1,u2,p0):
    tqessential.py:def newtraph6(x,a5,a4,a0):
    tqessential.py:def tqsextic(x,a5,a4,a0):
    tqessential.py:def computeRpRs(u1,u2,tT,tG,D):
    tqessential.py:def LDC_v2u(v1,v2):
    tqessential.py:def getFilterTags(StringArray):
    tqessential.py:def getTags(ModelParams):
    tqessential.py:def computePeriod(ModelParams):
    tqessential.py:def TransitLC(timeIn,F0,inc,aRs,Period,RpRs,u1,u2,T0):
    tqessential.py:def slopefitquick(x,y):

# myboundfunc.py
    #bound_MTQ_2010.py
        bound_MTQ_2010.py:def bound_u1plusu2_2010(ModelParams):
        bound_MTQ_2010.py:def bound_u1_2010(ModelParams):
        bound_MTQ_2010.py:def bound_v1_2010(ModelParams):
        bound_MTQ_2010.py:def bound_v1plusv2_2010(ModelParams):
        bound_MTQ_2010.py:def bound_D_2010(ModelParams):
        bound_MTQ_2010.py:def bound_RpRsSQ_2010(ModelParams):
        bound_MTQ_2010.py:def bound_tT_2010(ModelParams):
        bound_MTQ_2010.py:def bound_tG_2010(ModelParams):
        bound_MTQ_2010.py:def bound_bfraction_2010(ModelParams):
        bound_MTQ_2010.py:def bound_vfraction_2010(ModelParams):
        bound_MTQ_2010.py:def bound_vfraction_withD_2010(ModelParams):
        bound_MTQ_2010.py:def bound_bfraction_withD_2010(ModelParams):
        bound_MTQ_2010.py:def get_RpRsSQ_2010(ModelParams):
        bound_MTQ_2010.py:def bound_a0(ModelParams):
        bound_MTQ_2010.py:def bound_a1plusa2sq(ModelParams):
    #bound_MTQ_2011.py
        bound_MTQ_2011.py:def bound_v1_2011(ModelParams):
        bound_MTQ_2011.py:def bound_v1plusv2_2011(ModelParams):
        bound_MTQ_2011.py:def bound_D_2011(ModelParams):
        bound_MTQ_2011.py:def bound_tT_2011(ModelParams):
        bound_MTQ_2011.py:def bound_tG_2011(ModelParams):
        bound_MTQ_2011.py:def bound_vfraction_MTQ_2011(ModelParams):
        bound_MTQ_2011.py:def bound_bfraction_MTQ_2011(ModelParams):
        bound_MTQ_2011.py:def bound_bOVERaRs_MTQ_2011(ModelParams):
    
# myderivedfunc.py
    #derived_MTQ_2011.py
        derived_MTQ_2011.py:def printDerived_MTQ_2011(STARTFILE,MCMCfile,DerivedFile):
        derived_MTQ_2011.py:def filterMatchD(TransitTag,Tags,ModelParams):

# plotmcmc.py
    plotmcmc.py:def cmap_map(function,cmap):
    plotmcmc.py:def rangeMidpoints(x):
    plotmcmc.py:def return1Dfrom2D(arr2D):
    plotmcmc.py:def singleJC1data(data1,data2):
    plotmcmc.py:def singleJC(par1,par2,dataMCMC):
        
# misc.py
    mcmc.py:def String2Bool(inStr):
    mcmc.py:def String2IntFloat(inStr):

# runminuit.py
    runminuit.py:def RunMinuit(FunctionName,ObservedData,ModelParams,NuisanceData,BoundParams,tolnum,OutFile):
    runminuit.py:def f_chisquared(FunctionName,ObservedData,ModelParams,NuisanceData,BoundParams):
    runminuit.py:    def __init__(self, tdkeys):
    runminuit.py:    def __init__(self,parkeys):
    runminuit.py:    def __call__(self,*args):